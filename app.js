// app.js cho FROLL.org

let provider;
let signer;
let userAddress;

// K·∫øt n·ªëi v√≠
async function connectWallet() {
  if (window.ethereum) {
    provider = new ethers.providers.Web3Provider(window.ethereum);
    await provider.send("eth_requestAccounts", []);
    signer = provider.getSigner();
    userAddress = await signer.getAddress();
    document.getElementById("froll-price").innerText += ` | Wallet: ${shortenAddress(userAddress)}`;
  } else {
    alert("Please install MetaMask or use a Web3-enabled browser.");
  }
}

function shortenAddress(address) {
  return address.slice(0, 6) + "..." + address.slice(-4);
}

// B·∫•m n√∫t SWAP
document.getElementById("show-swap").addEventListener("click", () => {
  document.getElementById("swap-interface").style.display = "block";
  document.getElementById("dice-interface").style.display = "none";
  document.getElementById("swap-interface").innerHTML = swapHTML();
});

// B·∫•m n√∫t DICE
document.getElementById("show-dice").addEventListener("click", () => {
  document.getElementById("dice-interface").style.display = "block";
  document.getElementById("swap-interface").style.display = "none";
  document.getElementById("dice-interface").innerHTML = diceHTML();
});

// HTML c·ªßa ph·∫ßn SWAP
function swapHTML() {
  return `
    <h2>üîÅ Swap VIC ‚Üî FROLL</h2>
    <p>Connect wallet to swap your tokens on-chain.</p>
    <button class="button" onclick="alert('Swap coming soon!')">Swap Feature Coming Soon</button>
  `;
}

// HTML c·ªßa ph·∫ßn GAME
function diceHTML() {
  return `
    <h2>üé≤ Even or Odd Game</h2>
    <p>Choose your bet, stake FROLL, and roll!</p>
    <button class="button" onclick="alert('Game coming soon!')">Dice Game Coming Soon</button>
  `;
}

// G·ªçi h√†m k·∫øt n·ªëi v√≠ n·∫øu c·∫ßn t·ª± ƒë·ªông
window.addEventListener("load", () => {
  if (window.ethereum) {
    connectWallet();
  }
});
